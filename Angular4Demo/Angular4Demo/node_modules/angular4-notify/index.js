import { Component, EventEmitter, Injectable, Input, NgModule, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs/Subject';
import { NavigationStart, Router } from '@angular/router';
import 'rxjs/add/operator/filter';

var Notification = (function () {
    function Notification() {
    }
    return Notification;
}());

var TYPE_INFO = 'info';
var TYPE_ERROR = 'error';
var TYPE_WARNING = 'warning';
var NotificationsService = (function () {
    function NotificationsService() {
        this.notifications = new Subject();
    }
    /**
     * @param {?} notification
     * @return {?}
     */
    NotificationsService.prototype.pushNotification = function (notification) {
        this.notifications.next(notification);
    };
    /**
     * @param {?} text
     * @return {?}
     */
    NotificationsService.prototype.addInfo = function (text) {
        var /** @type {?} */ notification = new Notification();
        notification.message = text;
        notification.type = TYPE_INFO;
        this.pushNotification(notification);
    };
    /**
     * @param {?} text
     * @return {?}
     */
    NotificationsService.prototype.addError = function (text) {
        var /** @type {?} */ notification = new Notification();
        notification.message = text;
        notification.type = TYPE_ERROR;
        this.pushNotification(notification);
    };
    /**
     * @param {?} text
     * @return {?}
     */
    NotificationsService.prototype.addWarning = function (text) {
        var /** @type {?} */ notification = new Notification();
        notification.message = text;
        notification.type = TYPE_WARNING;
        this.pushNotification(notification);
    };
    return NotificationsService;
}());
NotificationsService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
NotificationsService.ctorParameters = function () { return []; };

var ContainerComponent = (function () {
    /**
     * @param {?} notificationsService
     * @param {?} router
     */
    function ContainerComponent(notificationsService, router) {
        this.notificationsService = notificationsService;
        this.router = router;
        this.notifications = [];
    }
    /**
     * @param {?} notification
     * @return {?}
     */
    ContainerComponent.prototype.render = function (notification) {
        this.notifications.push(notification);
    };
    /**
     * @param {?} notification
     * @return {?}
     */
    ContainerComponent.prototype.findSimilar = function (notification) {
        return this.notifications.find(function (existingNotification) {
            return existingNotification.message == notification.message
                && existingNotification.type == notification.type;
        });
    };
    /**
     * @return {?}
     */
    ContainerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.sub = this.notificationsService.notifications
            .subscribe(function (n) {
            if (_this.findSimilar(n)) {
                return;
            }
            _this.render(n);
        });
        this.routerSub = this.router.events
            .filter(function (event) { return event instanceof NavigationStart; })
            .subscribe(function (e) {
            _this.notifications = [];
        });
    };
    /**
     * @return {?}
     */
    ContainerComponent.prototype.ngOnDestroy = function () {
        this.sub.unsubscribe();
        this.routerSub.unsubscribe();
    };
    /**
     * @param {?} n
     * @return {?}
     */
    ContainerComponent.prototype.onDismissNotify = function (n) {
        return this.notifications.splice(this.notifications.indexOf(n), 1);
    };
    return ContainerComponent;
}());
ContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular4-notify-notifications-container',
                template: "<div class=\"notifications-container\"> <angular4-notify-notification *ngFor=\"let notification of notifications\" [notification]=\"notification\" (dismissNotify)=\"onDismissNotify($event)\"></angular4-notify-notification> </div>",
                styles: [".notifications-container { width: 100%; } .notify { width: 100%; padding: 8px 16px; } .notify i { margin-right: 16px; vertical-align: middle; cursor: pointer; } .error { background-color: #ef4a4a; } .info { background-color: #60db8f; } .warning { background-color: #dbb460; }"]
            },] },
];
/**
 * @nocollapse
 */
ContainerComponent.ctorParameters = function () { return [
    { type: NotificationsService, },
    { type: Router, },
]; };

var NotificationComponent = (function () {
    function NotificationComponent() {
        this.dismissNotify = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NotificationComponent.prototype.dismiss = function () {
        return this.dismissNotify.emit(this.notification);
    };
    return NotificationComponent;
}());
NotificationComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular4-notify-notification',
                template: "<div class=\"notify {{notification.type}}\"> <a type=\"button\" class=\"close\"> <i class=\"material-icons\" (click)=\"dismiss()\">clear</i> </a> {{notification.message}} </div> ",
                styles: [".notifications-container { width: 100%; } .notify { width: 100%; padding: 8px 16px; } .notify i { margin-right: 16px; vertical-align: middle; cursor: pointer; } .error { background-color: #ef4a4a; } .info { background-color: #60db8f; } .warning { background-color: #dbb460; }"]
            },] },
];
/**
 * @nocollapse
 */
NotificationComponent.ctorParameters = function () { return []; };
NotificationComponent.propDecorators = {
    'notification': [{ type: Input },],
    'dismissNotify': [{ type: Output },],
};

var NotificationsModule = (function () {
    function NotificationsModule() {
    }
    /**
     * @return {?}
     */
    NotificationsModule.forRoot = function () {
        return {
            ngModule: NotificationsModule,
            providers: [
                NotificationsService
            ]
        };
    };
    return NotificationsModule;
}());
NotificationsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    ContainerComponent,
                    NotificationComponent
                ],
                exports: [
                    ContainerComponent,
                    NotificationComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
NotificationsModule.ctorParameters = function () { return []; };

export { NotificationsModule, ContainerComponent, NotificationComponent, NotificationsService };
